public void performGameUpdate(int frameIdx)
{
	clearPlayerInfo();
	doBatteries();

	// Update speeds
	updateDrones(); // just the speed

	// Move
	moveEntities(); // 

	// Target
	updateUglyTargets();

	// Scans
	doScan();
	doReport();

	// Upkeep
	upkeepDrones();

	// Update speeds        
	updateFish();
	updateUglySpeeds();

	if (isGameOver()) {
		computeScoreOnEnd();
		gameManager.endGame();
	}

	gameTurn++;

	gameManager.addToGameSummary(gameSummaryManager.toString());
	gameSummaryManager.clear();

	int frameTime = animation.computeEvents();
	gameManager.setFrameDuration(frameTime);
}

void moveEntities()
{

	// move drones.
	for (Player p : players)
	{
		for (Drone drone : p.drones)
		{
			if (drone.dead)
			{
				continue;
			}

			//NOTE: the collision code does not take into account the snap to map borders
			for (Ugly ugly : uglies) {
				Collision col = getCollision(drone, ugly);
				if (col.happened()) {
					drone.dying = true;
					drone.scans.clear();
					drone.dieAt = col.t;

					gameSummaryManager.addPlayerSummary(
						p.getNicknameToken(),
						String.format(
							"%s's drone %d is hit by monster %d!",
							p.getNicknameToken(),
							drone.id,
							ugly.id
						)
					);

					dronesEaten++;
					// If two uglies hit the drone, let's just keep the first collision, it matters not.
					break;
				}
			}
		}
	}

	for (Player p : players) {
		for (Drone drone : p.drones) {
			Vector speed = drone.getSpeed();
			drone.pos = drone.pos.add(speed);
			snapToDroneZone(drone);
		}
	}

	for (Fish f : fishes)
	{
		f.pos = f.pos.add(f.getSpeed());
		snapToFishZone(f);
	}

	List<Fish> fishToRemove = fishes.stream().filter(
		fish -> fish.getPos().getX() > WIDTH - 1 || fish.getPos().getX() < 0
	).collect(Collectors.toList());

	for (Fish fish : fishToRemove)
	{
		if (fish.fleeingFromPlayer != null && fish.fleeingFromPlayer != -1) {
			chasedFishCount[fish.fleeingFromPlayer] += 1;
		}
	}

	fishes.removeAll(fishToRemove);

	for (Fish f : fishes) {
		f.fleeingFromPlayer = null;
	}

	for (Ugly ugly : uglies) {
		ugly.pos = ugly.pos.add(ugly.speed);
		snapToUglyZone(ugly);
	}

}



/* Coillsion Code*/
/**
* Credit for this collision code goes to the creators of <a href="https://www.codingame.com/contests/mean-max">Mean Max</a>
*/
Collision getCollision(Drone drone, Ugly ugly) {
	// Check instant collision
	if (ugly.getPos().inRange(drone.getPos(), DRONE_HIT_RANGE + UGLY_EAT_RANGE)) {
		return new Collision(0.0, ugly, drone);
	}

	// Both units are motionless
	if (drone.getSpeed().isZero() && ugly.getSpeed().isZero()) {
		return Collision.NONE;
	}

	// Change referencial
	double x = ugly.getPos().getX();
	double y = ugly.getPos().getY();
	double ux = drone.getPos().getX();
	double uy = drone.getPos().getY();


	// vector
	double x2 = x - ux;
	double y2 = y - uy;
	double r2 = UGLY_EAT_RANGE + DRONE_HIT_RANGE;
	double vx2 = ugly.getSpeed().getX() - drone.getSpeed().getX();
	double vy2 = ugly.getSpeed().getY() - drone.getSpeed().getY();

	// Resolving: sqrt((x + t*vx)^2 + (y + t*vy)^2) = radius <=> t^2*(vx^2 + vy^2) + t*2*(x*vx + y*vy) + x^2 + y^2 - radius^2 = 0
	// at^2 + bt + c = 0;
	// a = vx^2 + vy^2
	// b = 2*(x*vx + y*vy)
	// c = x^2 + y^2 - radius^2 

	double a = vx2 * vx2 + vy2 * vy2;

	if (a <= 0.0) {
		return Collision.NONE;
	}

	double b = 2.0 * (x2 * vx2 + y2 * vy2);
	double c = x2 * x2 + y2 * y2 - r2 * r2;
	double delta = b * b - 4.0 * a * c;

	if (delta < 0.0) {
		return Collision.NONE;
	}

	double t = (-b - Math.sqrt(delta)) / (2.0 * a);

	if (t <= 0.0) {
		return Collision.NONE;
	}

	if (t > 1.0) {
		return Collision.NONE;
	}

	return new Collision(t, ugly, drone);
}


